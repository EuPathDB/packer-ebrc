---

- hosts: buildhost
  tasks:
    - name: "Add hosts:"
      add_host:
        name="{{ source_website }}"
        groups=source_webserver
        ansible_user=mheiges

    - name: "Get environment from /dashboard"
      uri:
        url: "http://{{ source_website }}/dashboard/json"
        user: apidb
        password: me49polymerase
      register: _dashboard_raw

    - name: "Fail, invalid /dashboard report"
      fail:
      when: "_dashboard_raw.json.wdk is not defined"

    # This is a vars file used by subsequent plays.
    # The vars are in the `dashboard` namespace, e.g.
    # `dashboard.wdk.buildnumber`
    # `dashboard.svn.locations.0.location.remote`
    - name: "Create {{ source_website }}_dashboard.json"
      copy: content="{\"dashboard\":{{ _dashboard_raw.json }}}"
            dest="{{ playbook_dir }}/{{ source_website }}_dashboard.json"

- hosts: source_webserver
  vars_files: [ "{{ playbook_dir }}/{{ source_website }}_dashboard.json" ]
  tasks:
    - set_fact: buildnumber="{{ dashboard.wdk.buildnumber }}"

    - name: synchronize apiSiteFilesMirror to local cache
      synchronize:
        mode: pull
        src: "/var/www/Common/apiSiteFilesMirror/webServices/{{ dashboard.wdk.modelname }}/build-{{ buildnumber }}"
        dest: "scratch/apiSiteFilesMirror/{{ dashboard.wdk.modelname }}"
        delete: yes
        verify_host: no
        partial: no
        rsync_opts:
          - "--exclude-from=oprdatafiles.ws.rsync.exclude"

- hosts: buildhost
  vars_files: [ "{{ playbook_dir }}/{{ source_website }}_dashboard.json" ]
  tasks:
    - set_fact: buildnumber="{{ dashboard.wdk.buildnumber }}"
    - set_fact: product="{{ dashboard.wdk.modelname }}"

    - name: calculate size of cached apiSiteFilesMirror
      shell: "du -sh --apparent-size scratch/apiSiteFilesMirror/{{ product }}  | cut -f -1"
      register: asfSizeOut

    - name: make staging directory
      file: path="builds/staging/{{ product }}"
            state=directory

    - set_fact: dataImageSize="{{ asfSizeOut.stdout_lines.0 }}"
    - set_fact: data_img="builds/staging/{{ product }}/{{ product }}_{{ buildnumber }}.data.img"
    - name: "qemu-img create {{ dataImageSize }} data image"
      command: "qemu-img create -f qcow2 {{ data_img }} {{ dataImageSize }}"
      args:
        creates: "{{ data_img }}"

    - set_fact: appdbImageSize="{{ dashboard.wdk.databases.appdb.sizeondisk }}"
    - set_fact: appdb_img="builds/staging/{{ product }}/{{ product }}_{{ buildnumber }}.appdb.img"
    - name: "qemu-img create {{ appdbImageSize }}GB appdb image"
      command: "qemu-img create -f qcow2 {{ appdb_img }} {{ appdbImageSize }}"
      args:
        creates: "{{ appdb_img }}"

    - set_fact: userdbImageSize="{{ dashboard.wdk.databases.userdb.sizeondisk }}"
    - set_fact: userdb_img="builds/staging/{{ product }}/{{ product }}_{{ buildnumber }}.userdb.img"
    - name: "qemu-img create {{ userdbImageSize }} userdb image"
      command: "qemu-img create -f qcow2 builds/staging/{{ product }}/{{ product }}_{{ buildnumber }}.userdb.img {{ userdbImageSize }}"
      args:
        creates: "builds/staging/{{ product }}/{{ product }}_{{ buildnumber }}.userdb.img"
